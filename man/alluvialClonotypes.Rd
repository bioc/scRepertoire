% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/seuratFunctions.R
\name{alluvialClonotypes}
\alias{alluvialClonotypes}
\title{Exploring interaction of clonotypes by seurat or SCE dynamics}
\usage{
alluvialClonotypes(
  sc,
  cloneCall = c("gene", "nt", "aa", "strict"),
  chain = "both",
  y.axes = NULL,
  color = NULL,
  alpha = NULL,
  facet = NULL
)
}
\arguments{
\item{sc}{The seurat or SCE object to visualize after combineExpression(). 
For SCE objects, the cluster variable must be in the meta data under 
"cluster".}

\item{cloneCall}{How to call the clonotype - VDJC gene (gene), 
CDR3 nucleotide (nt) or CDR3 amino acid (aa), or 
VDJC gene + CDR3 nucleotide (strict).}

\item{chain}{indicate if both or a specific chain should be used - 
e.g. "both", "TRA", "TRG", "IGH", "IGL"}

\item{y.axes}{The columns that will separate the proportional 
visualizations.}

\item{color}{The column header or clonotype(s) to be highlighted.}

\item{alpha}{The column header to have gradated opacity.}

\item{facet}{The column label to separate.}
}
\value{
Alluvial ggplot comparing clonotype distribution across 
selected parameters.
}
\description{
View the proportional contribution of clonotypes by seurat or SCE object 
meta data after combineExpression(). The visualization is based on the 
ggalluvial package, which requires the aesthetics to be part of the axes 
that are visualized. Therefore, alpha, facet, and color should be part of 
the the axes you wish to view or will add an additional stratum/column to 
the end of the graph.
}
\examples{
#Getting the combined contigs
combined <- combineTCR(contig_list, rep(c("PX", "PY", "PZ"), each=2), 
rep(c("P", "T"), 3))

#Getting a sample of a Seurat object
screp_example <- get(data("screp_example"))
sce <- suppressMessages(Seurat::UpdateSeuratObject(screp_example))
sce <- Seurat::as.SingleCellExperiment(sce)

#Using combineExpresion()
sce <- combineExpression(combined, sce)

#Using alluvialClonotypes()
alluvialClonotypes(sce, cloneCall = "gene", 
y.axes = c("Patient", "ident"), color = "ident")

}
