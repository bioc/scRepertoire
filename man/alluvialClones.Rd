% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alluvialClones.R
\name{alluvialClones}
\alias{alluvialClones}
\title{Alluvial plotting for single-cell object meta data}
\usage{
alluvialClones(
  sc.data,
  cloneCall = "strict",
  chain = "both",
  y.axes = NULL,
  color = NULL,
  alpha = NULL,
  facet = NULL,
  exportTable = FALSE,
  palette = "inferno"
)
}
\arguments{
\item{sc.data}{The single-cell object to visualize
after \code{\link[=combineExpression]{combineExpression()}}.}

\item{cloneCall}{How to call the clone - VDJC gene (\strong{gene}),
CDR3 nucleotide (\strong{nt}), CDR3 amino acid (\strong{aa}),
VDJC gene + CDR3 nucleotide (\strong{strict}) or a custom variable
in the data.}

\item{chain}{indicate if both or a specific chain should be used -
e.g. "both", "TRA", "TRG", "IGH", "IGL".}

\item{y.axes}{The columns that will separate the proportional .
visualizations.}

\item{color}{The column header or clone(s) to be highlighted.}

\item{alpha}{The column header to have gradated opacity.}

\item{facet}{The column label to separate.}

\item{exportTable}{Exports a table of the data into the global
environment in addition to the visualization.}

\item{palette}{Colors to use in visualization - input any
\link[grDevices:palettes]{hcl.pals}.}
}
\value{
Alluvial ggplot comparing clone distribution.
}
\description{
View the proportional contribution of clones by Seurat or SCE object
meta data after \code{\link[=combineExpression]{combineExpression()}}. The visualization
is based on the ggalluvial package, which requires the aesthetics
to be part of the axes that are visualized. Therefore, alpha, facet,
and color should be part of the the axes you wish to view or will
add an additional stratum/column to the end of the graph.
}
\examples{
#Getting the combined contigs
combined <- combineTCR(contig_list, 
                        samples = c("P17B", "P17L", "P18B", "P18L", 
                                    "P19B","P19L", "P20B", "P20L"))

#Getting a sample of a Seurat object
scRep_example <- get(data("scRep_example"))

#Using combineExpresion()
scRep_example <- combineExpression(combined, scRep_example)
scRep_example$Patient <- substring(scRep_example$orig.ident, 1,3)

#Using alluvialClones()
alluvialClones(scRep_example, 
                   cloneCall = "gene", 
                   y.axes = c("Patient", "ident"), 
                   color = "ident")

}
\concept{SC_Functions}
