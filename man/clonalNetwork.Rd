% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clonalNetwork.R
\name{clonalNetwork}
\alias{clonalNetwork}
\title{Visualize clonal network along reduced dimensions}
\usage{
clonalNetwork(
  sc,
  reduction = "umap",
  identity = "ident",
  filter.clones = NULL,
  filter.identity = NULL,
  filter.proportion = NULL,
  filter.graph = FALSE,
  cloneCall = "strict",
  chain = "both",
  exportTable = FALSE,
  exportClones = FALSE
)
}
\arguments{
\item{sc}{The Seurat or SingleCellExperiment (SCE) after combineExpression().}

\item{reduction}{The name of the dimensional reduction of the single-cell object}

\item{identity}{A variable in the meta data to use for the nodes.}

\item{filter.clones}{Use to select the top n clones (filter.clones = 2000) or 
n of clones based on the minimum number of all the comparators (filter.clone = "min").}

\item{filter.identity}{Display the network for a specific level of the indicated identity}

\item{filter.proportion}{Remove clonotypes from the network below a specific proportion}

\item{filter.graph}{Remove the reciprocal edges from the half of the graph, 
allowing for cleaner visualization}

\item{cloneCall}{How to call the clonotype - VDJC gene (gene), 
CDR3 nucleotide (nt), CDR3 amino acid (aa), or 
VDJC gene + CDR3 nucleotide (strict).}

\item{chain}{indicate if both or a specific chain should be used - 
e.g. "both", "TRA", "TRG", "IGH", "IGL"}

\item{exportTable}{Exports a table of the data into the global 
environment in addition to the visualization}

\item{exportClones}{Exports a table of clones that are shared
across multiple identity groups and ordered by the total number
of clone copies.}
}
\value{
ggplot object
}
\description{
This function generates a network based on clonal 
proportions of an indicated identity and then superimposes
the network onto a single-cell object dimensional reduction
plot.
}
\examples{
\dontrun{
#Getting the combined contigs
combined <- combineTCR(contig_list, rep(c("PX", "PY", "PZ"), each=2), 
rep(c("P", "T"), 3))

#Getting a sample of a Seurat object
screp_example <- get(data("screp_example"))

#Using combineExpresion()
screp_example <- combineExpression(combined, screp_example)

#Using clonalNetwork()
clonalNetwork(screp_example, reduction = "umap",
              identity = "cluster")
}
              
}
